%\VignetteIndexEntry{Genomic Annotation Practical}
%\VignettePackage{GeneticsHTSCourse}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('DESeq2.Rnw')

\documentclass[12pt]{article}
\newcommand{\usecase}{\textit{\textbf{Use Case: }}}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(tidy=FALSE,dev="png",fig.show=TRUE,
               fig.width=7,fig.height=7,
               message=FALSE,eval=FALSE,echo=TRUE,results="hide")
@ 

<<style, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@


\title{Introduction to Bioconductor and {\tt R} refresher}

\author{Mark Dunning}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\maketitle
\tableofcontents
\section{Introduction}
The purpose of this practical is to introduce some of the key object-types that are used in the Bioconductor project, and to refresh your memory on R basics

\subsection{Reading data into R}
Read the NKI expression values into R. What type of object is created? How can you find out the dimensions of this file? How would you read the data differently if the file was comma-separated?

Now try the square bracket notation "[" to subset the rows and columns of the object.
<<>>=
expression <- read.delim("data/NKI295.exprs.txt")
dim(expression)
head(expression)
expression[1:10,]
expression[1:5,1:10]

@

You will see that the first column of the data frame gives the probe IDs that were used on the microarray. Create a new data frame without these IDs, and that has the IDs as row names


<<>>=
rownames(expression) <- expression[,1]
evals <- expression[,-1]
@

Each row in this new matrix contains the expression values for a particular (arbitrary) gene for each patient in the study. It is worth noting that we can use the \Rcode{row.names} argument to pick a particular column in the original text file to be used as row names. This avoids having to rename the rownames after having read the file and creating a new copy of the data frame without the names.

<<>>=
evals <- read.delim("data/NKI295.exprs.txt",row.names=1,as.is=TRUE)
dim(evals)
head(evals)
evals[1:10,]
evals[1:5,1:10]
@


\subsection{Dealing with numerical data}

We can convert the data frame into a matrix, which will make things easier in the following plots. 

<<>>=
evals <- as.matrix(evals)
evals[1,]
summary(evals[1,])
mean(evals[1,])
colnames(evals)[which(evals[1,] > 2)]
colnames(evals)[which(evals[1,] < -4)]
@

We can make a histogram of the values as follows.
<<>>=
hist(evals[1,])
@


\subsection{A digression on plotting}
If we try and make a scatter plot of the expression level of a particular gene across the samples, the result is quite ugly.

<<>>=
plot(evals[1,])
@

The \Rfunction{plot} function can be customised in many ways. R has many in-built colours, which can be selected from the \Rfunction{colors} function. This online pdf can be used as a guide to choosing colours http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf

The first thing to do would be to add a colour to each point and use a different '\textbf{p}lotting \textbf{ch}aracter'.In total 25 different plotting characters are possible and each is assigned a unique numeric code. e.g. a popular choice is the number 16 , which defines filled circles. These are described in the documentation for the \Rfunction{points} function ({\tt ?points})

Use the \Rfunction{colors} function to see what colours are available. Then plot the expression values for the first gene in the matrix across all samples in the colour \Rcode{steeblue}.

<<>>=
colors()

plot(evals[1,],col="steelblue",pch=1:25)
@
Here we specify the same colour for each point. In fact, we could specify a unique color for each point by creating a vector the same length as the number of points to be plotted. In general, the colour vector will be \textit{recycled}.

<<>>=
rainbow(n=ncol(evals))
plot(evals[1,],col=rainbow(n=ncol(evals)),pch=16)
@

We can also add more-meaningful labels to the axes and a title
<<>>=
plot(evals[1,],col="steelblue",pch=16,xlab="Patient",ylab="Expression value",main="Expression of gene X")
@



<<>>=
values <- evals[1,]
plot(values)
plot(values,col="steelblue",pch=16)
outl <- which(abs(values) > 4)
abline(h=c(-4,4))
points(outl,values[outl],col="red",pch=16)

@


\subsection{Summarising the clincal variables}


Now read the clinical annotations for the dataset. What are the dimensions of the resulting object and how do they relate to the expression values?

<<>>=
clinical <- read.delim("data//NKI295.pdata.txt")
dim(clinical)
head(clinical)

@



Select the following columns from the clinical data; sample name, size, node, grade and ER. Do this at least two different ways. Produce a numeric summary

<<>>=
colnames(clinical)
clinical[,c(1,8,9,10,11)]
clinical[,c("sampleNames", "size", "node","grade","ER")]
summary(clinical[,c("sampleNames", "size", "node","grade","ER")])
@


<<>>=
par(mfrow=c(2,2))
barplot(summary(clinical$size))
barplot(summary(clinical$node))
barplot(summary(clinical$grade))
barplot(summary(clinical$ER))

@

<<>>=
barplot(table(clinical$ER,clinical$grade),beside=TRUE)
@
The age of each patient is given as a numeric value, so needs to be summarised differently. However, the summary function is clever enough to be able to handle numerical, as well as categorical, data. Produce a boxplot and verify


<<>>=
summary(clinical$Age.years.)
boxplot(clinical$Age.years.)
@


<<>>=
hist(clinical$Age.years.)
@

Finally, read the feature annotation for the dataset. Again, what are the dimensions are how to they correspond to the expression values?

<<>>=
features <- read.delim("data//NKI295.fdata.txt")
head(features)
@

\section{Combining expression values, clinical data and feature information}

\subsection{Creating an ExpressionSet}

Load the Biobase package and create an ExpressionSet representation of the data using the \Rfunction{readExpressionSet} function. If you didn't have Biobase installed, how would you install it? How can you find out what \Rfunction{readExpressionSet} does and the arguments it accepts?

<<>>=
library(Biobase)
eset <- readExpressionSet("data//NKI295.exprs.txt", "data//NKI295.pdata.txt")
?readExpressionSet
@

Show a summary of the eset object and verify that it has the correct number of samples and features. 

<<>>=
eset
@



\subsection{Accessing sample annotation}

Use the \Rfunction{pData} function to access the sample information for the ExpressionSet object. Check that the row names of the sample information correspond to the columns in the expression matrix.

<<>>=
sampleMat <- pData(eset)
head(sampleMat)
rownames(sampleMat)
colnames(exprs(eset))
all(rownames(sampleMat) == colnames(exprs(eset)))
@


Create an ExpressionSet that contains just ER negative patients

<<>>=
sampleMat$ER == "Negative"
erNegSet <- eset[,sampleMat$ER == "Negative"]
@

Create an ExpressionSet where the patients are ordered according to the variable \Rcode{Age.years}. 

<<>>=
ageOrdered <- eset[,order(sampleMat$Age.years.)]
pData(ageOrdered)
@

\section{Extracting the data for a particular gene}

Use the features matrix to find the probe ID for the \textit{ESR1} gene. Extract the row from the expression matrix that corresponds to this probe.

<<>>=
head(features)
match("ESR1", features[,2])
features[match("ESR1", features[,2]),]

myrow <- match("ESR1", features[,2])
mygene <- exprs(eset)[myrow,]
mygene
plot(density(mygene))
@


\section{}
Remind yourself of the contents of the clinical file, and create a vector to store the ER status of each sample. 

Make a boxplot of ESR1 expression in ER positive and ER negative groups. Do you notice a trend? Calculate the mean expression of ESR1 in ER positive and ER negative samples. Finally, use a t-test to test if the difference is significant.


<<>>=
head(pData(eset))

ERStatus <- pData(eset)$ER

boxplot(mygene ~ ERStatus)

tapply(mygene, ERStatus, mean)

t.test(mygene ~ ERStatus)
@

The genefilter package contains a convenient way to calculate t-statistics for many genes simultaneously. Use the \Rfunction{rowttests} function to calculate t-statistics for each gene. Create an ordered vector of absolute t-tstatistics.

<<>>=
library(genefilter)
tstats <- rowttests(exprs(eset), as.factor(ERStatus))
head(tstats)

ordt <- order(abs(tstats),decreasing=TRUE)
@


<<>>=
erNegSamp <- which(clinical$ER == "Negative")
erNegSamp

erPosSamp <- which(clinical$ER == "Positive")
erPosSamp

posAve <- rowMeans(evals[,erPosSamp])
negAve <- rowMeans(evals[,erNegSamp])

M <- posAve - negAve
A <- (posAve + negAve)*0.5

plot(A,M)

@


Now use a {\tt for} loop to make boxplots of the top 10 genes and save to a pdf file. Put the Symbol of each gene in the plot title.

<<>>=
pdf("TopGenes.pdf")

for(i in 1:10){
  rowind <- ordt[i]
  geneName <- features[rowind,2]
  boxplot(exprs(eset)[rowind,]~ERStatus,main=geneName)
}
dev.off()

@

\end{document}